@page "/"
@using MTGAWeightsCalculator.Models
@using MTGAWeightsCalculator.Services
@inject MTGDeckParser DeckParserService

<h3>MTGA Deck weight calculator</h3>

<input type="checkbox" @bind-value="isHistoricBrawl"> <b>Is Historic Brawl?</b>

<br />
<br />

<InputTextArea class="form-control" @ref="multiLineInput" id="multilineInput" @bind-Value="deckId" placeholder="Enter deck code" />
<button @onclick="ParseDeck">Get Deck Weight</button>
<button @onclick="ClearInput">Clear Input</button>

<br />
<br />

<h4>Get Single Card weight</h4>
<InputText @bind-Value="cardName" @ref="singleInput" placeholder="Enter Card Name" />
<input type="checkbox" @bind-value="isCommander"> Is Commander?
<button @onclick="GetSingleCardWeightAsync">Get Card Weight</button>



@if (cards != null)
{
    <h5>Total Weight: @cards.TotalWeight.ToString()</h5>
    <table class="table resizable-table">
        
        <thead>
            <tr>
                <td><h4>Quantity</h4></td>
                <td><h4>Card Name</h4></td>
                <td><h4>Weight</h4></td>
            </tr>
            @foreach (var weight in cards.Cards)
            {
                <tr>
                    <td>@weight.Quantity.ToString()</td>
                    <td>@weight.CardName</td>
                    <td>@weight.Weight.ToString()</td>
                </tr>
            }
        </thead>
        <tbody>
        </tbody>
    </table>
}

@if (singleCardWeight != 0)
{
    <h4>Single Card Weight:</h4>
    <ul>
        <li>@singleCardWeight.ToString()</li>
    </ul>
}

@code {
    private string deckId = null!;
    private OutputCards? cards = null!;
    private string cardName = string.Empty;
    private bool isCommander = false;
    private bool isHistoricBrawl = false;
    private int singleCardWeight = 0;
    private InputTextArea? multiLineInput;
    private InputText? singleInput;

    private async Task ParseDeck()
    {
        singleCardWeight = 0;
        if (!string.IsNullOrEmpty(deckId))
        {
            cards = await DeckParserService.ParseDeck(deckId, isHistoricBrawl);
        }

        await SetMultiLineInputFocusAsync();
    }

    private async Task GetSingleCardWeightAsync()
    {
        cards = null;
        cardName = cardName.Trim();
        if (!string.IsNullOrEmpty(cardName))
        {
            if (isCommander)
                singleCardWeight = await DeckParserService.GetCommanderWeightAsync(cardName, isHistoricBrawl);
            else
                singleCardWeight = await DeckParserService.GetSingleCardWeightAsync(cardName, isHistoricBrawl);
        }

        await SetSingleLineInputFocusAsync();
    }

    private async Task ClearInput()
    {
        deckId = string.Empty;
        cards = null;
        await SetMultiLineInputFocusAsync();
    }

    private async Task SetMultiLineInputFocusAsync()
    {
        if (multiLineInput?.Element != null)
        {
            await multiLineInput.Element.Value.FocusAsync();
        }
    }

    private async Task SetSingleLineInputFocusAsync()
    {
        if (singleInput?.Element != null)
        {
            await singleInput.Element.Value.FocusAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await DeckParserService.InitializeBrawlWeightsCache();
    }
}
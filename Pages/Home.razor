@page "/"
@using MTGAWeightsCalculator.Models
@using MTGAWeightsCalculator.Services
@inject MTGDeckParser DeckParserService

@using MudBlazor
@using System.Linq
@* 
<PageTitle>MTGA Card Weights Calculator</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="false">MTGA Card Weights Calculator</MudText>
 *@
<div class="form-group">
    

    <MudGrid>
        <MudItem xs="6">
            <MudField Label="Get Deck Card Weights" Variant="Variant.Outlined">
                <MudTextField T="string" Variant="Variant.Text" @bind-Value="@deckId" Lines="10" Placeholder="Enter deck code" />
                <MudCheckBox @bind-Value="isHistoricBrawl" Color="Color.Primary" Label="Is Historic Brawl?" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ParseDeck">Get Deck Weight</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ClearInput">Clear Input</MudButton>
            </MudField>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="6">
            <MudField Label="Get Single Card Weight" Variant="Variant.Outlined">
                <MudAutocomplete T="string"
                                 @bind-Value="cardName"
                                 SearchFunc="SearchCards"
                                 CoerceText="true"
                                 CoerceValue="true"
                                 ShowProgressIndicator="true"
                                 Placeholder="Enter Card Name" />
                <MudCheckBox Dense="true" @bind-Value="isCommander" Color="Color.Primary" Label="Is Commander?" />
                <MudCheckBox Dense="true" @bind-Value="isHistoricBrawlSingleCard" Color="Color.Primary" Label="Is Historic Brawl?" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetSingleCardWeightAsync">Get Card Weight</MudButton>
                @if (singleCardWeight != 0)
                {
                    <MudField Label="Weight" Variant="Variant.Outlined">@singleCardWeight.ToString()</MudField>
                }
            </MudField>
        </MudItem>
    </MudGrid>
</div>

@if (cards != null)
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudField Label="Combined total weight" Variant="Variant.Text">@cards.TotalWeight</MudField>
        </MudItem>
    </MudGrid>
    <MudDataGrid Items="@cards.Cards" ColumnResizeMode=ResizeMode.Container>
        <Columns>
            <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
            <PropertyColumn Property="x => x.CardName" Title="Card Name" />
            <PropertyColumn Property="x => x.SingleWeight" Title="Single Card Weight" />
            <PropertyColumn Property="x => x.Weight" Title="Total Weight" />
        </Columns>
    </MudDataGrid>
}



@code {
    private string deckId = null!;
    private OutputCards? cards = null!;
    private string cardName = string.Empty;
    private bool isCommander = false;
    private bool isHistoricBrawl = false;
    private bool isHistoricBrawlSingleCard = false;
    private int singleCardWeight = 0;
    private InputTextArea? multiLineInput;
    private InputText? singleInput;

    private List<string> allCardNames = new List<string>(); // Assuming you have a way to get all card names

    private async Task ParseDeck()
    {
        if (!string.IsNullOrEmpty(deckId))
        {
            cards = await DeckParserService.ParseDeck(deckId, isHistoricBrawl);
        }

        await SetMultiLineInputFocusAsync();
    }

    private async Task GetSingleCardWeightAsync()
    {
        cardName = cardName.Trim();
        if (!string.IsNullOrEmpty(cardName))
        {
            if (isCommander)
                singleCardWeight = await DeckParserService.GetCommanderWeightAsync(cardName, isHistoricBrawlSingleCard);
            else
                singleCardWeight = await DeckParserService.GetSingleCardWeightAsync(cardName, isHistoricBrawlSingleCard);
        }

        await SetSingleLineInputFocusAsync();
    }

    private async Task ClearInput()
    {
        deckId = string.Empty;
        cards = null;
        await SetMultiLineInputFocusAsync();
    }

    private async Task SetMultiLineInputFocusAsync()
    {
        if (multiLineInput?.Element != null)
        {
            await multiLineInput.Element.Value.FocusAsync();
        }
    }

    private async Task SetSingleLineInputFocusAsync()
    {
        if (singleInput?.Element != null)
        {
            await singleInput.Element.Value.FocusAsync();
        }
    }

    private async Task<IEnumerable<string>> SearchCards(string value)
    {
        return await Task.FromResult(allCardNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    protected override async Task OnInitializedAsync()
    {
        await DeckParserService.InitializeBrawlWeightsCache();

        allCardNames = await DeckParserService.GetAllCardNames();
    }
}
